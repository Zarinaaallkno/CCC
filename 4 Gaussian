#include <iostream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <numeric>

using namespace std;

// Function to perform Gaussian elimination
vector<double> gaussianElimination(vector<vector<double>> A, vector<double> b) {
    int n = b.size();
    // Augment matrix A with vector b.
    for (int i = 0; i < n; ++i) {
        A[i].push_back(b[i]);
    }

    // Forward elimination
    for (int i = 0; i < n; ++i) {
        // Partial pivoting (optional but good for numerical stability)
        int pivot_row = i;
        for (int k = i + 1; k < n; ++k) {
          if(abs(A[k][i]) > abs(A[pivot_row][i])){
             pivot_row = k;
          }
        }

        if(pivot_row != i){
          swap(A[i], A[pivot_row]);
        }

        if (abs(A[i][i]) < 1e-10) { // Check for singularity
          return {}; // Return empty vector if the matrix is singular.
        }

        for (int j = i + 1; j < n; ++j) {
            double factor = A[j][i] / A[i][i];
            for (int k = i; k <= n; ++k) {
                A[j][k] -= factor * A[i][k];
            }
        }
    }

    // Back substitution
    vector<double> x(n);
    for (int i = n - 1; i >= 0; --i) {
        x[i] = A[i][n];
        for (int j = i + 1; j < n; ++j) {
            x[i] -= A[i][j] * x[j];
        }
        x[i] /= A[i][i];
    }

    return x;
}

int main() {
    // Example system of equations (same as Python example):
    vector<vector<double>> A = {{2, 1, -1},
                                 {-3, -1, 2},
                                 {-2, 1, 2}};
    vector<double> b = {8, -11, -3};

    vector<double> x = gaussianElimination(A, b);

    if (!x.empty()) {
        cout << "Solution:" << endl;
        for (int i = 0; i < x.size(); ++i) {
            cout << "x" << i + 1 << " = " << fixed << setprecision(2) << x[i] << endl;
        }
    } else {
        cout << "No unique solution exists." << endl;
    }

    return 0;
}
